# bot/services/sender.py
import os
import asyncio
from aiogram import Bot
from sqlalchemy import select
from datetime import datetime

from database.db import AsyncSessionLocal
from database.models import News, SentNews
from services.rss_reader import get_all_rss_news  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–≤–æ–π —Ä–∏–¥–µ—Ä

BOT_TOKEN = os.getenv("TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
TOPIC_ID = os.getenv("TOPIC_ID")
TOPIC_ID = int(TOPIC_ID) if TOPIC_ID else None

bot = Bot(token=BOT_TOKEN)

async def sync_rss_to_db():
    """–ü–∞—Ä—Å–∏—Ç RSS –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –±–∞–∑—É."""
    news_list = await get_all_rss_news()
    new_count = 0

    async with AsyncSessionLocal() as session:
        for item in news_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ URL
            stmt = select(News).where(News.url == item["link"])
            result = await session.execute(stmt)
            exists = result.scalar_one_or_none()
            if exists:
                continue  # —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            news = News(
                title=item["title"],
                url=item["link"],
                created_at=datetime.utcnow(),
            )
            session.add(news)
            new_count += 1

        await session.commit()

    print(f"üì∞ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑—É.")
    return new_count

async def send_new_news():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram-–≥—Ä—É–ø–ø—É –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ."""
    # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è RSS ‚Üí DB
    await sync_rss_to_db()

    async with AsyncSessionLocal() as session:
        stmt = (
            select(News)
            .outerjoin(SentNews, SentNews.news_id == News.id)
            .where(SentNews.id.is_(None))
        )
        result = await session.execute(stmt)
        unsent_news = result.scalars().all()

        if not unsent_news:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ üí§")
            return

        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(unsent_news)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        for news in unsent_news:
            text = f"<b>{news.title}</b>\n{news.url}"

            try:
                if TOPIC_ID:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        message_thread_id=TOPIC_ID,
                        text=text,
                        parse_mode="HTML",
                    )
                else:
                    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")

                await asyncio.sleep(1)

                sent = SentNews(
                    user_id=None, news_id=news.id, sent_at=datetime.utcnow()
                )
                session.add(sent)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ({news.url}): {e}")

        await session.commit()
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
