# services/sender.py
import os
import asyncio
from datetime import datetime
import dateutil.parser

from aiogram import Bot
from sqlalchemy import select

from database.db import AsyncSessionLocal
from database.models import News, SentNews
from services.rss_reader import get_all_rss_news  # —Ç–≤–æ–π –º–æ–¥—É–ª—å —á—Ç–µ–Ω–∏—è RSS

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
TOPIC_ID = os.getenv("TOPIC_ID")
TOPIC_ID = int(TOPIC_ID) if TOPIC_ID else None

bot = Bot(token=BOT_TOKEN)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def to_datetime_safe(value):
    """–ü—Ä–æ–±—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É RSS –≤ datetime; –µ—Å–ª–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç ‚Äî –±–µ—Ä—ë—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""
    try:
        if not value:
            return datetime.utcnow()
        return dateutil.parser.parse(value)
    except Exception:
        return datetime.utcnow()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def sync_rss_to_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É."""
    news_list = await get_all_rss_news()
    new_count = 0

    async with AsyncSessionLocal() as session:
        for item in news_list:
            stmt = select(News).where(News.url == item["link"])
            result = await session.execute(stmt)
            exists = result.scalar_one_or_none()
            if exists:
                continue  # —Ç–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –µ—Å—Ç—å

            # –¥–æ—Å—Ç–∞—ë–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ RSS
            published_at = to_datetime_safe(item.get("published") or item.get("updated"))

            news = News(
                title=item["title"],
                url=item["link"],
                published_at=published_at,
            )

            session.add(news)
            new_count += 1

        await session.commit()

    print(f"üì∞ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑—É.")
    return new_count


async def send_new_news():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã, –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ.
    –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –æ—Ç–∫–ª—é—á—ë–Ω.
    """
    # —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ RSS
    await sync_rss_to_db()

    async with AsyncSessionLocal() as session:
        stmt = (
            select(News)
            .outerjoin(SentNews, SentNews.news_id == News.id)
            .where(SentNews.id.is_(None))
        )
        result = await session.execute(stmt)
        unsent_news = result.scalars().all()

        if not unsent_news:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ üí§")
            return

        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(unsent_news)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        for news in unsent_news:
            text = f"<b>{news.title}</b>\n{news.url}"

            try:
                if TOPIC_ID:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        message_thread_id=TOPIC_ID,
                        text=text,
                        parse_mode="HTML",
                        disable_web_page_preview=True,  # üëà –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    )
                else:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        text=text,
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                    )

                await asyncio.sleep(1)  # –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å Telegram API

                sent = SentNews(
                    user_id=None,
                    news_id=news.id,
                    sent_at=datetime.utcnow(),
                )
                session.add(sent)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ({news.url}): {e}")

        await session.commit()
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
