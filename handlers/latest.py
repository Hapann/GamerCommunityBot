# bot/handlers/latest.py
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from services.rss_reader import get_all_rss_news
from logger.logger import logger
import os

news_router = Router()

# ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏ —Ç–æ–ø–∏–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = os.getenv("CHAT_ID")
TOPIC_ID = os.getenv("TOPIC_ID")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
def safe_int(value, name):
    try:
        return int(value) if value else None
    except (ValueError, TypeError):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {name}: {value}")
        return None

CHAT_ID = safe_int(CHAT_ID, "CHAT_ID")
TOPIC_ID = safe_int(TOPIC_ID, "TOPIC_ID")

logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã: CHAT_ID={CHAT_ID}, TOPIC_ID={TOPIC_ID}")


def format_news_message(news_item, total_count=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    message_parts = [
        f"<b>{news_item['title']}</b>",
        f"üîó {news_item['link']}",
        f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}",
    ]

    if total_count is not None:
        message_parts.append(f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_count}")

    return "\n".join(message_parts)


@news_router.message(Command("latest"))
async def send_latest_news(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS‚Äë–ª–µ–Ω—Ç."""
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /latest –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}"
    )

    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS‚Äë–ª–µ–Ω—Ç")

        news = await get_all_rss_news()
        count = len(news)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {count} –Ω–æ–≤–æ—Å—Ç–µ–π")

        if not news:
            logger.warning("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            await message.answer("üò¥ –ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        text = format_news_message(news[0], count)
        await message.answer(text, parse_mode="HTML")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news[0]['title'][:50]}...")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /latest: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
