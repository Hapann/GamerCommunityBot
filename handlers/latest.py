# bot/handlers/latest.py
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from services.rss_reader import get_all_rss_news
from logger.logger import logger
import os

news_router = Router()

# ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏ —Ç–æ–ø–∏–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = os.getenv("CHAT_ID")
TOPIC_ID = os.getenv("TOPIC_ID")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
if CHAT_ID:
    try:
        CHAT_ID = int(CHAT_ID)
    except (ValueError, TypeError):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CHAT_ID: {CHAT_ID}")
        CHAT_ID = None

if TOPIC_ID:
    try:
        TOPIC_ID = int(TOPIC_ID)
    except (ValueError, TypeError):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TOPIC_ID: {TOPIC_ID}")
        TOPIC_ID = None

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: CHAT_ID={CHAT_ID}, TOPIC_ID={TOPIC_ID}")

def format_news_message(news_item, total_count=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    message_parts = [
        f"<b>{news_item['title']}</b>",
        f"üîó {news_item['link']}",
        f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}"
    ]

    if total_count is not None:
        message_parts.append(f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_count}")

    return "\n".join(message_parts)

@news_router.message(Command("latest"))
async def send_latest_news(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS‚Äë–ª–µ–Ω—Ç."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /latest –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")

    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")

        news = await get_all_rss_news()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS-–ª–µ–Ω—Ç")

        if not news:
            logger.warning("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            await message.answer("üò¥ –ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        text = format_news_message(news[0], len(news))
        await message.answer(text, parse_mode="HTML")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news[0]['title'][:30]}...")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /latest: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

@news_router.message(Command("send_to_group"))
async def send_to_group_test(message: Message, bot: Bot):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É."""
    logger.info(f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    try:
        if not CHAT_ID:
            await message.answer("‚ùå CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        if not TOPIC_ID:
            await message.answer("‚ùå TOPIC_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("TOPIC_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        test_text = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n–≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ç–æ–ø–∏–∫–æ–º!"

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(
            chat_id=CHAT_ID,
            message_thread_id=TOPIC_ID,
            text=test_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {CHAT_ID}, —Ç–æ–ø–∏–∫ {TOPIC_ID}")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}"
        logger.error(error_msg)
        await message.answer(error_msg)

@news_router.message(Command("check_env"))
async def check_env_vars(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    env_info = (
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:</b>\n"
        f"CHAT_ID: {CHAT_ID} (—Ç–∏–ø: {type(CHAT_ID).__name__})\n"
        f"TOPIC_ID: {TOPIC_ID} (—Ç–∏–ø: {type(TOPIC_ID).__name__})\n"
        f"TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if os.getenv('TOKEN') else '–ù–µ—Ç'}"
    )

    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ env: CHAT_ID={CHAT_ID}, TOPIC_ID={TOPIC_ID}")
    await message.answer(env_info, parse_mode="HTML")

@news_router.message(Command("debug_rss"))
async def debug_rss(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã RSS."""
    logger.info("=== –ù–ê–ß–ê–õ–û –û–¢–õ–ê–î–ö–ò RSS ===")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
        import aiohttp
        from services.rss_reader import RSS_FEEDS, HEADERS

        async with aiohttp.ClientSession() as session:
            for url in RSS_FEEDS:
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
                try:
                    async with session.get(url, headers=HEADERS, timeout=10) as response:
                        status = response.status
                        content_type = response.headers.get('content-type', 'unknown')
                        logger.info(f"üì° {url} - —Å—Ç–∞—Ç—É—Å: {status}, —Ç–∏–ø: {content_type}")

                        if status == 200:
                            content = await response.text()
                            logger.info(f"üì• {url} - –ø–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

                            # –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                            import feedparser
                            parsed = feedparser.parse(content)
                            logger.info(f"üìä {url} - –∑–∞–ø–∏—Å–µ–π: {len(parsed.entries)}, –æ—à–∏–±–∫–∞: {parsed.bozo}")

                            if parsed.entries:
                                for i, entry in enumerate(parsed.entries[:2]):
                                    title = getattr(entry, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]
                                    logger.info(f"üì∞ {url} - –∑–∞–ø–∏—Å—å {i+1}: {title}...")
                        else:
                            logger.warning(f"‚ùå {url} - –ø–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å: {status}")

                except Exception as e:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ {url}: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        from services.rss_reader import get_all_rss_news
        news = await get_all_rss_news()
        logger.info(f"üéØ –ò—Ç–æ–≥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        await message.answer(f"üîß –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ RSS")

    logger.info("=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò RSS ===")

@news_router.message(Command("test"))
async def test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞")
    await message.answer("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /test –ø–æ–ª—É—á–µ–Ω–∞.")
